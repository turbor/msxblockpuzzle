; MSX Block Puzzle game, released as entry for the MSXDev'20
; Created by David Heremans, aka turbor on mrc
;
; The entire gameover sequence is coded here. 
; starting with the entrance of the green bar, the no more moves text
; showing of the score text and finaly copying the old background back into place
;

showgameover:
	;no music when ai is moving the pieces!!
	ld a,(ai_active)
	or a
	call z,gameovermusic

	ld de,increasedisplayscore
	call addroutine
	ld de,backupnametabel
	ld hl,nametabel
	ld bc,32*24
	ldir
	; add the new 125 and up chars
	ld hl,vrampatgameover
	ld de,125*8
	ld bc,vrampatgameoverend-vrampatgameover
	call LDIRVM	; copy patern table
	ld hl,vrampatgameover
	ld de,125*8+256*8
	ld bc,vrampatgameoverend-vrampatgameover
	call LDIRVM	; copy patern table
	ld hl,vrampatgameover
	ld de,125*8+512*8
	ld bc,vrampatgameoverend-vrampatgameover
	call LDIRVM	; copy patern table

	; add the new 125 and up chars
	ld hl,vramcolgameover
	ld de,0x2000+125*8
	ld bc,vramcolgameoverend-vramcolgameover
	call LDIRVM	; copy patern table
	ld hl,vramcolgameover
	ld de,0x2000+125*8+256*8
	ld bc,vramcolgameoverend-vramcolgameover
	call LDIRVM	; copy patern table
	ld hl,vramcolgameover
	ld de,0x2000+125*8+512*8
	ld bc,vramcolgameoverend-vramcolgameover
	call LDIRVM	; copy patern table

	; now scroll in the green background
	ld ix,nametabel+31+5*32
	ld b,32
showgameover2:
	push bc
	ld a,125
	push ix
	pop hl
	ld de,32
	ld (hl),a
	inc a
	add hl,de
	ld b,8
showgameover3:
	ld (hl),a
	add hl,de
	djnz showgameover3
	inc a
	ld (hl),a
	ld hl,nametabel
	ld de,#1800
	ld bc,32*24
	call LDIRVM
	ei
	halt
	halt
	push ix
	call execroutine
	halt
	halt
	call execroutine
	pop ix
	dec ix
	pop bc
	djnz showgameover2

	;small pauze
	ld b,10
showgameover4:
	ei
	halt
	halt
	push bc
	call execroutine
	pop bc
	djnz showgameover4

	; start scrolling in 'no more moves' text
	ld b,16
	ld ix,nametabel+31+6*32
showgameover5:
	push ix
	pop de
	push bc
	ld hl,vramnamegameover
	ld a,17
	sub b
	ld c,a
	ld b,7
showgameover6:
	push bc
	push hl
	push de
	ld b,0
	ldir
	; next line wit hl
	ld bc,16
	pop hl
	add hl,bc
	add hl,bc
	ex de,hl
	pop hl
	add hl,bc
	pop bc
	djnz showgameover6

	ld hl,nametabel
	ld de,#1800
	ld bc,32*24
	call LDIRVM
	ei
	halt
	halt
	push ix
	call execroutine
	pop ix

	pop bc
	dec ix
	djnz showgameover5

	; move text in place
	ld b,8
showgameover7:
	push bc
	ld de,nametabel+6*32
	ld hl,nametabel+1+6*32
	ld bc,32*7
	ldir

	ld hl,nametabel
	ld de,#1800
	ld bc,32*24
	call LDIRVM
	ei
	halt
	halt
	call execroutine

	pop bc
	djnz showgameover7

	ld b,50
showgameover8:
	ei
	halt
	halt
	push bc
	call execroutine
	pop bc
	djnz showgameover8

	; move text off screen
	ld b,24
showgameover9:
	push bc
	ld de,nametabel+6*32
	ld hl,nametabel+1+6*32
	ld bc,32*7
	ldir
	ld a,126
	ld (nametabel+6*32+31),a
	ld (nametabel+7*32+31),a
	ld (nametabel+8*32+31),a
	ld (nametabel+9*32+31),a
	ld (nametabel+10*32+31),a
	ld (nametabel+11*32+31),a

	ld hl,nametabel
	ld de,#1800
	ld bc,32*24
	call LDIRVM
	ei
	halt
	halt
	call execroutine

	pop bc
	djnz showgameover9
	; start a scroller with score text
	xor a
	ld (scrolltextcount),a
	ld a,1	; just doing it once is better now that we have music
	ld (scrolltextmaxcount),a
showgameover20:
	; determine text to show depending on current score bigger,smaller or equal to hiscore
	ld hl,hiscore+1
	ld de,realscore+1
	call bcdcmpdehl
	jr z,showgameover23
	jr c,showgameover24
	ld hl,newhighscoretext
	jr showgameover25
showgameover23:
	ld hl,equalhighscoretext
	jr showgameover25
showgameover24:
	ld hl,regularscoretext
showgameover25:
	push hl
	; now do the actuall scrolling
	; first setup some variables
	ld de,32
	ld (scrollbuflength),de
	ld de,nametabel+6*32
	ld (scrollbufpnt),de
	ld a,1
	call setbigfonttouse
	call createbigcharset
	call createbigcharsetvram
	;ld de,bigchartosimpelconvert
	;ld (bigchartosimpelcnvpnt),de
	ld de,bigscrolchr2vram3tabels
	ld (bigscrolchr2vrampnt),de
	ld de,showgameoverret
	ld (bigscrolswitchfgpnt),de
	xor a
	ld (scrollpage),a
	ld hl,scrollpatternendbuf
	ld de,scrollpatternendbuf+1
	ld bc,15
	ld (hl),a
	ldir
	dec a
	ld (scrollpatterncombinedb),a

	pop hl
	;set fast speed for big scroller
	ld a,1
	ld (scrolltextspeed),a
	call scrollbigtext
	;now update hiscore if needed
	ld hl,hiscore
	ld de,realscore
	call bcdcmpdehl
	jr z,showgameover27
	jr c,showgameover27
	ld de,hiscore+1
	ld hl,realscore+1
	ld bc,6
	ldir
showgameover27:
	; scroll the original background in again
	; first make sure the latest score updates are not lost, otherwise you will see the score jump down a few points when the background is restored
	ld de,backupnametabel+32*21
	ld hl,nametabel+32*21
	ld bc,32*2
	ldir

	ld hl,nametabel+31
	ld (DX),hl
	ld hl,backupnametabel+31
	ld (SX),hl
	ld a,32
	ld b,a
	ld (SWidth),a
	ld (DWidth),a
	ld a,24
	ld (NY),a
	ld a,1
	ld (NX),a

showgameover10:
	push bc
	call doboxcopy
	ld hl,nametabel
	ld de,#1800
	ld bc,32*24
	call LDIRVM
	ei
	halt
	halt
	call execroutine
	ld a,(NX)
	inc a
	ld (NX),a
	ld hl,(SX)
	dec hl
	ld (SX),hl
	ld hl,(DX)
	dec hl
	ld (DX),hl
	pop bc
	djnz showgameover10

	ld de,increasedisplayscore
	call delroutine

	ld a,(waitinterrupted)
	or a
	; now stop music instead of ret nz
	jp nz,stopmusic

	ld b,10
showgameover11:
	ei 
	halt
	halt
	push bc
	call execroutine
	pop bc
	djnz showgameover11
	jp stopmusic

showgameoverret:
	ret

regularscoretext:	db "SCORE   <         NOW   PLAY   AGAIN   AND   BEAT   THE   HISCORE                     ",0
newhighscoretext:	db "      "
	; "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ      "
	db "NEW   HISCORE   <         THE   PREVIOUS   HISCORE         >            ",0
equalhighscoretext:	db "YOU   EQUALLED   THE   HISCORE   <         NOW   TRY   AGAIN            ",0


;	vim:foldmethod=marker:ft=z8a:ts=26
