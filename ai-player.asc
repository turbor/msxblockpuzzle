; MSX Block Puzzle game, released as entry for the MSXDev'20
; Created by David Heremans, aka turbor on mrc
;
; This is the ai player that controls the preview/demo of the game
;

ai_player_joystick:	; return joystick movement of the AI-player
	; but first check if we need to exit to mainscreen if real joystick is moved
	call getrealjoystick
	cp 255
	jr z,ai_player_joystickai

ai_player_joystick0:
	call getrealjoystick
	cp 255
	jr nz,ai_player_joystick0
	jp end_ai_player_by_user

ai_player_joystickai:
	; if gameover then ai stops
	ld a,(gameover)
	or a
	jr z,ai_player_joystick1
	; general game code set the gameover state so now we will 
	; just wait for a while before returning to the introscreen
	ld a,(ai_state)
	cp 255
	jr z, ai_player_joystick1
	ld a,255
	ld (ai_state),a
	ld a,128
	ld (ai_slowdown),a
	jr ai_player_joystick1

end_ai_player_by_user:
	ld a,1
	ld (gameover),a

ai_state255:
	ld a,254
	ld (ai_state),a
	jp ai_release_joy

ai_player_joystick1:
	ld a,(ai_slowdown)
	dec a
	ld (ai_slowdown),a
	jp nz,ai_hold_joy
	ld a,AI_SLOWDOWNINI
	ld (ai_slowdown),a
	; if joystick move previous we now reset
	ld a,(ai_prevjoy)
	cp 255
	jp nz,ai_release_joy
	;now check the state and determine action
	ld a,(ai_state)
	cp 1
	jr z,ai_state1
	jr c,ai_state0
	cp 3
	jp z,ai_state3
	jr c,ai_state2
	cp 5
	jp z,ai_state5
	jr c,ai_state4
	cp 254 ; countdown for gameover
	jp z,ai_release_joy
	jr nc,ai_state255
	; something went wrong so we ended in state 6

	di
	halt

ai_state0:	; check if placable
	; first store current position since item_is_placable_on_board will move it around to first placable position
	ld hl,itemmask
	ld de,maskbackup2
	ld bc,20
	ldir

	ld a,(pieceplayednow)
	call item_is_placable_on_board
	push af
	ld de,itemmask
	ld hl,maskbackup2
	ld bc,20
	ldir
	pop af
	jr z,ai_state0_nextstate
	; item not placable so next item please
	jp ai_next_item

ai_state0_nextstate:
	call ai_increment_state
	jp ai_release_joy

ai_state1:	; random desired pos
	call ai_randommax9
	ld (ai_desired_x),a
	call ai_randommax9
	ld (ai_desired_y),a
	call ai_increment_state
	jp ai_release_joy

ai_state4:
ai_state2:	; move to desired pos
	; did we reache it already ?
	call ai_calculate_currentpos
	ld c,0
	ld a,(ai_desired_x)
	ld b,a
	ld a,(ai_current_x)
	cp b
	jr z,ai_state2_1
	inc c ; X not reached
ai_state2_1:
	ld a,(ai_desired_y)
	ld b,a
	ld a,(ai_current_y)
	cp b
	jr z,ai_state2_2
	inc c ; y not reached
	inc c ; c=c+2
ai_state2_2:
	xor a
	or c
	jr nz,ai_state2_move
	; we reached the desired position!
	call ai_increment_state
	jp ai_release_joy

ai_state2_move: ; reg c : bit0=X bit1=Y move needed
	ld a,c
	cp 3
	jr nz,ai_state2_move2
	call random
	and 1
ai_state2_move2: ; now move horizontal if bit 0 otherwise move vertical
	cp 1
	jp z,ai_movehorizontal
	;no so we move vertical
ai_movevertical:
	ld a,(ai_current_y)
	ld c,a
	ld a,(ai_desired_y)
	cp c
	jr c,ai_up_joy ;moveverticalup

ai_moveverticaldown:
	call shiftdownallowed
	jr z,ai_down_joy
	;ai_moveverticalstop:
	ld a,(ai_current_y)
	ld (ai_desired_y),a
	jr ai_release_joy

ai_movehorizontal:
	ld a,(ai_current_x)
	ld c,a
	ld a,(ai_desired_x)
	cp c
	jr c,ai_left_joy
	call shiftrightallowed
	jr z,ai_right_joy
	ld a,(ai_current_x)
	ld (ai_desired_x),a
	jr ai_release_joy

ai_state3:	; check if dropable
	call item_place_allowed
	jr nz,ai_state3_nodrop
	xor a
	ld (ai_state),a
	jr ai_drop_joy
ai_state3_nodrop: ; go to place were we know drop is posible
	ld a,(ai_possible_x)
	ld (ai_desired_x),a
	ld a,(ai_possible_y)
	ld (ai_desired_y),a
	call ai_increment_state
	jr ai_release_joy

ai_state5:
	; we reached the desired position
	; where we could drop this piece
	; so ... drop it
	; check if dropable
	call item_place_allowed
	jr nz,ai_increment_state
	xor a
	ld (ai_state),a
	jr ai_drop_joy

ai_increment_state:
	ld hl,ai_state
	inc (hl)
	ret


ai_up_joy:
	ld a,255-1 ;pin 1/up
	jr ai_setprevjoy
ai_down_joy:
	ld a,255-2 ;pin 2/down
	jr ai_setprevjoy
ai_left_joy:
	ld a,255-4 ;pin 3/left
	jr ai_setprevjoy
ai_right_joy:
	ld a,255-8 ;pin 4/right
	jr ai_setprevjoy
ai_drop_joy:
	ld a,255-16 ;pin 6/trigger A
	jr ai_setprevjoy
ai_next_item:
	ld a,255-32 ;pin 7/trigger B
	jr ai_setprevjoy
ai_release_joy:
	ld a,255
ai_setprevjoy:
	ld (ai_prevjoy),a
	call joystickspriteanimation
	ld a,(ai_prevjoy)
	ret

ai_hold_joy:
	ld a,(ai_prevjoy)
	ret

ai_randommax9:
	call random
ai_randommax9_1:
	cp 10
	ret c
	sub 9
	jr ai_randommax9_1

ai_calculate_currentpos:
	ld hl,itemmask
	ld b,0
ai_calculate_currentpos1:
	ld e,(hl)
	inc hl
	ld d,(hl)
	inc hl
	ld a,e
	or d
	jr nz,ai_calculate_currentpos2
	inc b
	jr ai_calculate_currentpos1
ai_calculate_currentpos2:
	ld a,b
	ld (ai_current_y),a
	ld hl,itemmask
	ld de,0
	ld b,10
ai_calculate_currentpos3:
	ld a,(hl)
	inc hl
	or e
	ld e,a
	ld a,(hl)
	inc hl
	or d
	ld d,a
	djnz ai_calculate_currentpos3
	ld b,0
	ex de,hl
ai_calculate_currentpos4:
	bit 7,h
	jr nz,ai_calculate_currentpos5
	add hl,hl
	inc b
	jr ai_calculate_currentpos4
ai_calculate_currentpos5:
	ld a,b
	ld (ai_current_x),a
	ret


;	vim:foldmethod=marker:ft=z8a:ts=16
