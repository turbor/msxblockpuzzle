initplayfield:
	ld hl,grid10x10	;{{{
	ld de,1+grid10x10
	
	xor a
	ld (hl),a
	ld bc,100
	ldir

	ld hl,gridbitmap
	ld de,gridbitmap+1
	xor a
	ld (hl),a
	ld bc,20
	ldir

	;ret
	; preset a field
	xor a
	ld de,gridbitmap
	ld hl,debuggrid10x10
	ld bc,20
	ldir
	ret
	;}}}

debuggrid10x10:
	dw %0111111111000000
	dw %1000111111000000
	dw %1000111111000000
	dw %1000000111000000
	dw %1111000111000000
	dw %1111000001000000
	dw %1111011111000000
	dw %1111011111000000
	dw %1011000001000000
	dw %1111011110000000


gridbitmap_to_grid10x10:
	ld de,grid10x10	;{{{
	ld b,10
gridbitmap_to_grid10_2:
	push bc
	; get correct word from gridbitmap in hl, code for hl=gridbitmap[10-b]
	ld a,10
	sub b
	add a,a
	ld c,a
	ld b,0
	ld hl,gridbitmap
	add hl,bc
	ld a,(hl)
	inc hl
	ld h,(hl)
	ld l,a
	;now shift left hl for each bit and set grid10x10 to 3 if bit set 
	; otherwise simply skip (position might be part of running animation)
	ld b,10
gridbitmap_to_grid10_4:
	xor a
	add hl,hl	; shift out bit 15 into carry
	adc a,a
	jr z,gridbitmap_to_grid10_5
	ld a,3
	ld (de),a
gridbitmap_to_grid10_5
	inc de
	djnz gridbitmap_to_grid10_4
	; now next row
	pop bc
	djnz gridbitmap_to_grid10_2
	ret

	ret	;}}}

; code that makes all bytes with value > 4 older by adding one, if value >28 then make it zero
grid10x10_do_animation
	ld hl,grid10x10	;{{{
	ld bc,100*256
grid10x10_do_animation1
	ld a,(hl)
	cp 4
	jr c,grid10x10_do_animation3
	inc a
	cp 39
	jr c,grid10x10_do_animation5
	xor a
grid10x10_do_animation5
	ld (hl),a
	inc c
grid10x10_do_animation3
	inc hl
	djnz grid10x10_do_animation1
	ld a,c
	ld (grid10x10_do_animation_inprogress),a
	ret ;}}}

; convert grid10x10 to nametabel, each byte in grid10x10 conevrts to 4 visible chars
; byte 0(emptyfield),1(yellow),2(red),3(blue) are fixed stones
; 4-30 ar all mapped to a blue stone
; 31 and higher are mapped to the blue stone animations
; this 4 to 30 range is used as a delay counter for the animation to start
grid10x10_to_nametabel:
	ld ix,nametabel+32+1 ; row 1 column 1 {{{
	ld hl,grid10x10
	ld b,10
grid10x10_to_name1:
	push bc
	;convert a row to correct characters
	ld b,10
grid10x10_to_name3
	ld a,(hl)
	inc hl
	cp 4
	jr c,grid10x10_to_name7 ; a is correct fixed stone
	cp 31
	jr c,grid10x10_to_name5
	sub 27
	jr grid10x10_to_name7
grid10x10_to_name5:
	ld a,3
grid10x10_to_name7:
	add a,a
	add a,a
	ld (ix+0),a
	inc a
	ld (ix+1),a
	inc a
	ld (ix+32),a
	inc a
	ld (ix+33),a
	inc ix
	inc ix
	djnz grid10x10_to_name3
	; to next row
	ld bc,64-20
	add ix,bc
	pop bc
	djnz grid10x10_to_name1
	ret	;}}}

	; copy rows to vram skipping first and last 3 rows,
gridnametabel_to_vram:
	ld hl,nametabel+32	;{{{
	ld de,#1800+32
	ld bc,32*20
	jp LDIRVM ; jp instead of calll+ret
	; }}}

; code that checks which rows are all filled and need to be removed
calc_rows_to_remove:
	xor a	; {{{
	ld (row2dispnumber),a
	ld h,a
	ld l,a
	ld de,gridbitmap+9*2
	ld bc,10*256+9
calc_rows_to_remove2:
	ld a,(de)
	and #c0
	cp #c0
	jr nz,calc_rows_to_remove4
	inc de
	ld a,(de)
	dec de
	cp #ff
	jr nz,calc_rows_to_remove4
	; this row needs to be remove

	; store row number
	ld a,c
	ld (row2dispfirstrow),a

	; increase row count
	ld a,(row2dispnumber)
	inc a
	ld (row2dispnumber),a

	scf
	jr calc_rows_to_remove5
calc_rows_to_remove4:
	or a ; clear cary flag
calc_rows_to_remove5:
	rr h
	rr l
	dec de
	dec de
	dec c
	djnz calc_rows_to_remove2
	ld (row2disamask),hl
	ret
	; }}}

; this code actually removes to the rows from the gridbitmap and marks block to animate in grid10x10
calc_rows_remove:
	ld hl,(row2disamask)	; {{{
	ld b,10
	ld ix,grid10x10
	ld de,gridbitmap

calc_rows_remove2:
	add hl,hl
	jr nc, calc_rows_remove5

	xor a
	ld (de),a
	inc de
	ld (de),a
	dec de

	;mark in grid10x10
	ld a,255
	ld (ix+0),a
	ld (ix+1),a
	ld (ix+2),a
	ld (ix+3),a
	ld (ix+4),a
	ld (ix+5),a
	ld (ix+6),a
	ld (ix+7),a
	ld (ix+8),a
	ld (ix+9),a


calc_rows_remove5:
	inc de
	inc de
	push bc
	ld bc,10
	add ix,bc
	pop bc
	djnz calc_rows_remove2
	ret	;}}}


; code that checks which colls are all filled and need to be removed
calc_cols_to_remove:
	xor a	;{{{
	ld (col2dispnumber),a
	ld hl,#ffff
	ld de,gridbitmap
	ld b,10
calc_cols_to_remove2
	ld a,(de)
	and l
	ld l,a
	inc de
	ld a,(de)
	and h
	ld h,a
	inc de
	djnz calc_cols_to_remove2
	ld (col2disapmask),hl
	ld a,l
	or h
	ret z
	;
	; Some columns will disappear so calculate amount of cols (and first one to go)
	; also apply mask in gridbitmap and in grid10x10 mark with code 255
	;
	; now calculate the first column to remove and the amount of columns to remove
	ld bc,10*256
calc_cols_to_remove3:
	add hl,hl
	jr c,calc_cols_to_remove4
	inc c
	djnz calc_cols_to_remove3
calc_cols_to_remove4:
	; c contains the column that has the first bit set to 1
	ld a,c
	ld (col2dispfirstcol),a
	ld c,1 ; one column counted
	;count the rest of the columns
calc_cols_to_remove5:
	xor a
	add hl,hl
	adc a,c
	ld c,a
	djnz calc_cols_to_remove5
	ld a,c
	ld (col2dispnumber),a
	ret	; }}}

; this code actually removes to the cols from the gridbitmap and marks block to animate in grid10x10
calc_cols_remove:
	; now apply mask to gridbitmap	{{{
	ld a,255
	ld hl,(col2disapmask)
	xor h
	ld d,a
	ld a,255
	xor l
	ld e,a
	ld hl,gridbitmap
	ld b,10
calc_cols_to_remove6:
	ld a,e
	and (hl)
	ld (hl),a
	inc hl
	ld a,d
	and (hl)
	ld (hl),a
	inc hl
	djnz calc_cols_to_remove6
	; now mark in grid10x10
	ld ix,grid10x10
	ld hl,(col2disapmask)
	ld b,10
	ld a,255
calc_cols_to_remove7:
	add hl,hl
	jr nc,calc_cols_to_remove8
	ld (ix+0),a
	ld (ix+10),a
	ld (ix+20),a
	ld (ix+30),a
	ld (ix+40),a
	ld (ix+50),a
	ld (ix+60),a
	ld (ix+70),a
	ld (ix+80),a
	ld (ix+90),a
calc_cols_to_remove8:
	inc ix
	djnz calc_cols_to_remove7
	ret	;}}}

; code to setup animation with correct delays after calc_cols(rows)_remove have tagged them in the grid10x10
calc_remove_speed:
	ld a,(row2dispfirstrow)	;{{{
	ld c,a
	ld a,(col2dispfirstcol)
	cp c
	jr c,calc_remove_speed2
	ld a,c
calc_remove_speed2:
	; this is now the delta for adjusted delay
	ld c,a
	ld de,grid10x10
	ld hl,delaystrip
	ld b,10
calc_remove_speed3:
	push bc
	push hl
	ld b,10
calc_remove_speed4:
	ld a,(de)
	cp 255
	jr nz,calc_remove_speed5
	ld a,(hl)
	add a,c
	ld (de),a
calc_remove_speed5:
	inc de
	inc hl
	djnz calc_remove_speed4
	pop hl
	pop bc
	inc hl
	djnz calc_remove_speed3
	ret	; }}}

delaystrip:	db 28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,5,5

clear_itemmask: ;changes only hl!
	ld hl,0
	ld (itemmask),hl
	ld (itemmask+2),hl
	ld (itemmask+4),hl
	ld (itemmask+6),hl
	ld (itemmask+8),hl
	ld (itemmask+10),hl
	ld (itemmask+12),hl
	ld (itemmask+14),hl
	ld (itemmask+16),hl
	ld (itemmask+18),hl
	;xor a
	ld (emptyitemmask),hl
	ret

selectnewplayablepieces:
	call clear_itemmask
	call randompiece
	ld (pieceplayable1),a
	call randompiece
	ld (pieceplayable2),a
	call randompiece
	ld (pieceplayable3),a
	ret

randompiece:
	call RANDOM
	ld h,piecerandomdistribution/256
	ld l,a
	ld a,(hl)
	ret


get_preview_nametabel:	; in a (number 0,1 or 2)     out de:address in nametabel for preview
	; {{{
	cp 1
	jr z,get_preview_nametabel1
	jr c,get_preview_nametabel0
	ld de,nametabel+0x1B8	;a==2
	ret
get_preview_nametabel1:
	ld de,nametabel+0xF8	;a==1
	ret
get_preview_nametabel0:
	ld de,nametabel+0x38	;a==0
	ret ; }}}

clear_piece_preview:	; clear the preview in a is preview number(0,1 or 2)
	; {{{
	call get_preview_nametabel
	ld h,d
	ld l,e
	inc de
	ld a,#30
	ld (hl),a
	ld bc,4
	ldir
	ld bc,32-4
	add hl,bc
	ld d,h
	ld e,l
	inc de
	ld bc,4
	ldir
	ld bc,32-4
	add hl,bc
	ld d,h
	ld e,l
	inc de
	ld bc,4
	ldir
	ld bc,32-4
	add hl,bc
	ld d,h
	ld e,l
	inc de
	ld bc,4
	ldir
	ld bc,32-4
	add hl,bc
	ld d,h
	ld e,l
	inc de
	ld bc,4
	ldir
	ret	;}}}



addressofpiece:	; calculate address of piece in a
	ld b,0	; {{{
	add a,a
	ld c,a
	ld hl,pieces
	add hl,bc
	ld a,(hl)
	inc hl
	ld h,(hl)
	ld l,a
	ret	;}}}

playablepieces_to_nametabel:	; needs to fall through to activateplayablepiece
	ld a,(pieceplayable1)	; {{{
	ld de,nametabel+0x38
	ld hl,#3031
	call activateplayablepiece

	ld a,(pieceplayable2)
	ld de,nametabel+0xF8
	ld hl,#3031
	call activateplayablepiece

	ld a,(pieceplayable3)
	ld de,nametabel+0x1B8
	ld hl,#3031
	call activateplayablepiece
	jp clear_itemmask
	;}}}

activateplayablepiece:; in a is piecenumber, de=nametabel entry for preview, hl are chars to use for empty/filled preview grid
	ld (itempreviewcolors),hl	; {{{
	call clear_itemmask
	push de	; store nametable destination
	; calculate address of piece in a
	call addressofpiece
	ld (pieceplayednowpnt),hl ; store pointer to score
	inc hl ; skip score for now
	push hl

	; copy 5 words of mask to itemmask
	inc hl
	inc hl
	ld de,itemmask
	ld bc,10
	ldir

	pop hl

;move mask down as much as needed
	ld a,(hl)
	inc hl
	or a
	jr z,playablepieces_to_nametab4
	push hl
	ld b,a
playablepieces_to_nametab2
	push bc
	call shiftdown
	pop bc
	djnz playablepieces_to_nametab2
	pop hl

;move mask to right as much as needed
playablepieces_to_nametab4
	ld a,(hl)
	or a
	jr z,playablepieces_to_nametab6
	ld b,a
playablepieces_to_nametab5
	push bc
	call shiftright
	pop bc
	djnz playablepieces_to_nametab5

playablepieces_to_nametab6
	pop hl	; restore nametable destination

	;now draw 5 rows of 5 chars for the first 5 rows of the 5 high bits of itemmask
	ld b,5
	ld de,itemmask+1
playablepieces_to_nametab6a
	ld a,(de)
	inc de
	inc de

	push bc
	push de
	ld de,(itempreviewcolors)
	ld b,5
playablepieces_to_nametab7
	add a,a
	jr c,playablepieces_to_nametab8
	ld (hl),d
	jr playablepieces_to_nametab9
playablepieces_to_nametab8
	ld (hl),e
playablepieces_to_nametab9
	inc hl
	djnz playablepieces_to_nametab7

	ld de,32-5
	add hl,de

	pop de
	pop bc
	djnz playablepieces_to_nametab6a
	; now recreate itemmask but with the offset of previous movesin playingfield
	ld hl,(pieceplayednowpnt) ; store pointer to score
	inc hl ; skip score for now
	inc hl
	inc hl
	ld de,itemmask
	ld bc,10
	ldir ; copy 5 words of mask to itemmask
playablepieces_to_nametab20:
	ld a,(itemmaskrowoffset)
	ld b,a
	ld a,(itemmask_oldpiece_offsetrow)
	add a,b
	ld hl,(pieceplayednowpnt)
	inc hl
	add a,(hl)
	cp 128
	jr c,playablepieces_to_nametab20a
	xor a
playablepieces_to_nametab20a:
	or a
	jr z,playablepieces_to_nametab22
	ld b,a
playablepieces_to_nametab21:
	push bc
	call shiftdownallowed
	call z,shiftdown
	pop bc
	djnz playablepieces_to_nametab21
playablepieces_to_nametab22:

	ld a,(itemmaskcoloffset)
	ld b,a
	ld a,(itemmask_oldpiece_offsetcol)
	add a,b
	ld hl,(pieceplayednowpnt)
	inc hl
	inc hl
	add a,(hl)
	cp 128
	jr c,playablepieces_to_nametab22a
	xor a
playablepieces_to_nametab22a:
	or a
	ret z
	ld b,a
playablepieces_to_nametab23:
	push bc
	call shiftrightallowed
	call z,shiftright
	pop bc
	djnz playablepieces_to_nametab23


	ret	;}}

;routine voor random getallen
RANDOM:
; In A random getal 0-255
; verandert A
        PUSH    BC
        LD      A,R
        LD      C,A
        RRCA
        RRCA
        RRCA
        RRCA
        XOR     C
        AND     15
        LD      C,A
        LD      A,R
        LD      B,A
        RLCA
        RLCA
        RLCA
        RLCA
        XOR     B
        AND     240
        ADD     A,C
        PUSH    AF
        LD      A,(RNDGTL)
        RLCA
        LD      C,A
        POP     AF
        XOR     C
        LD      (RNDGTL),A
        POP     BC
        RET



;	vim:foldmethod=marker:ft=z8a:ts=16
