setbigfonttouse:	; in a,is font type
	
	and 7
	add a,a
	add a,a
	add a,a
	ld de,setbigfontdb
	ld l,a
	ld h,0
	add hl,de
	ld e,(hl)
	inc hl
	ld d,(hl)
	inc hl
	ld (bigchartosimpelcnvpnt),de
	ld e,(hl)
	inc hl
	ld d,(hl)
	inc hl
	ld (bigscroltopleftpnt),de
	ld e,(hl)
	inc hl
	ld d,(hl)
	inc hl
	ld (bigscrolcharspnt),de
	ret


setbigfontdb:
	; for intro
	dw introbigcharconvert
	dw bigchartopleft2
	;dw screen1chardb
	dw bigscrolchars
	dw 0
	; for gameover
	dw bigchartosimpelconvert
	dw bigchartopleft
	dw bigscrolchars
	dw 0
	;now simpelest charconversion aka none at all
	dw introbigcharconvert2
	dw bigchartopleft2
	dw screen1chardb
	;dw bigscrolchars
	dw 0

introbigcharconvert:
	; 0 is empty, 1 is completely full
	db  0, 0, 0, 0
	db  0, 2, 3, 0
	db  0, 5, 6, 0
	db  0, 0, 0, 0
	db  1, 1, 1, 1
	db  1,15,16, 1
	db  1,18,19, 1
	db  1, 1, 1, 1
introbigcharconvert2:
	; 0 is empty, 1 is completely full
	db  0, 0, 0, 0
	db  0, 0, 0, 0
	db  0, 0, 0, 0
	db  0, 0, 0, 0
	db  1, 1, 1, 1
	db  1, 1, 1, 1
	db  1, 1, 1, 1
	db  1, 1, 1, 1

insertscoreinscroll:	; in hl,de
	; {{{
	ld b,5
insertscoreinscroll0:; first skip leading zero's
	ld a,(hl)
	or a
	jr nz,insertscoreinscroll1
	inc hl
	djnz insertscoreinscroll0
insertscoreinscroll1:
	ld a,(hl) ; last inc hl before djnz fall through....
	cp 255
	ret z

	ld (de),a
	inc de
	inc hl
	jr insertscoreinscroll1
	; }}}

scrollbigtextinsertscore:
	; {{{
	inc hl
	push hl
	ld hl,realscore+1
	call insertscoreinscroll
	pop hl
	jr scrollbigtext0
	; }}}
scrollbigtextinserthiscore:
	; {{{
	inc hl
	push hl
	ld hl,hiscore+1
	call insertscoreinscroll
	pop hl
	jr scrollbigtext0
	; }}}
scrollbigtext:
	; in HL text to scroll {{{
	ld de,scrolltext
scrollbigtext0:
	ld a,(hl)
	or a
	jr z,scrollbigtext3
	cp 32
	jr z,scrollbigtextspaceadded
	cp '>'
	jr z,scrollbigtextinserthiscore
	cp '<'
	jr z,scrollbigtextinsertscore
	sub '0'
	cp 10
	jr c,scrollbigtext1
	sub 7
	cp 36
	jr c,scrollbigtext1
	ld a,36
scrollbigtext1:
	ld (de),a
	inc hl
	inc de
	jr scrollbigtext0
scrollbigtextspaceadded:
	ld a,36
	jr scrollbigtext1

scrollbigtext3: ; start actual scroll here
	ld a,255
	ld (de),a ; final closing marker
	; setup some data
	;ld hl,nametabel+31+6*32
	ld de,(scrollbuflength)
	dec de
	ld hl,(scrollbufpnt)
	add hl,de
	ld (DX),hl
	ld a,32
	ld (DWidth),a
	ld a,8
	ld (SWidth),a
	ld (NY),a
	ld a,1
	ld (NX),a

	;start from char -1 since we increase immediately
	ld a,(scrolltextcount)
	dec a
	ld (scrolltextcount),a


scrollbigtext4: ; all setup so actuall loop here
	; go back to first letter of text and check if max loop count reached
	ld de,scrolltext
	ld (scrolltextpnt),de
	ld a,(scrolltextcount)
	inc a
	ld (scrolltextcount),a
	ld e,a
	ld a,(scrolltextmaxcount)
	cp e
	ret z

scrollbigtext5:
	; get letter to scroll in
	ld de,(scrolltextpnt)
	ld a,(de)
	cp 255
	jr z,scrollbigtext4 ; end-of-text reached
	inc de
	ld (scrolltextpnt),de
	add a,a ; *2
	add a,a ; *4
	ld l,a
	ld h,0
	add hl,hl ; *8
	ld de,(bigscrolcharspnt)
	add hl,de
	call chartobig	; 8 bytes to 8x8chars including corner manipulation
	ld hl,workspace+100
	ld (SX),hl
	ld b,6
	xor a
	ld (waitinterrupted),a
scrollbigtext6:
	push bc
	;now move the scrollbuffer
bbbb:
	;handle first column that will drop from scrolling
	ld b,7
	ld de,(scrollbufpnt)
scrollbigtext7:
	push bc
	push de
	push de
	;unregister the chars that drop of the scrollbufer
yyyy
	call scrollunregistercombinerchar
	pop de
	pop hl

	inc hl
	push de
	ld bc,(scrollbuflength)
	ldir
	pop hl
	ld bc,32
	add hl,bc
	ex de,hl
	pop bc
	djnz scrollbigtext7

	; now clean up scrollpatterncombinedb
	call cleanupscrollpatterncombinedb
zzzz
	;now copy 7 lines from (SX) to the scrollpatternendbuf
	; first move the buffer and then insert the new lines
	ld de,scrollpatternendbuf
	ld hl,scrollpatternendbuf+1
	ld bc,15
	ldir
	;now copy in 7 chars in correct place
	ld e,0
	exx
	ld bc,8
	ld hl,(SX)
	ld de,scrollpatternendbuf+1


	ld a,(hl); unrolled loop 1
	ld (de),a
	exx 
	or e
	ld e,a
	exx
	add hl,bc
	inc de
	inc de

	ld a,(hl); unrolled loop 2
	ld (de),a
	exx 
	or e
	ld e,a
	exx
	add hl,bc
	inc de
	inc de

	ld a,(hl); unrolled loop 3
	ld (de),a
	exx 
	or e
	ld e,a
	exx
	add hl,bc
	inc de
	inc de

	ld a,(hl); unrolled loop 4
	ld (de),a
	exx 
	or e
	ld e,a
	exx
	add hl,bc
	inc de
	inc de

	ld a,(hl); unrolled loop 5
	ld (de),a
	exx 
	or e
	ld e,a
	exx
	add hl,bc
	inc de
	inc de

	ld a,(hl); unrolled loop 6
	ld (de),a
	exx 
	or e
	ld e,a
	exx
	add hl,bc
	inc de
	inc de

	ld a,(hl); unrolled loop 7
	ld (de),a
	exx 
	or e
	exx
	jp nz,scrollbigtext77
	;scrolled in all 0 chars so for proportional fontdisplay this is the end of the char!!
	; so get the push bc value from scrollbigtext6: and set to end
	pop bc
	ld b,1
	push bc

scrollbigtext77:

cccc
	call preparescrollpatterncombinedb
	; call doboxcopy


;	ld hl,nametabel
;	ld de,#1800
;	ld bc,32*24
;	call LDIRVM

	ld b,4
scrollbigtext75:
	push bc
	;now scroll 4 times two pixel 
	call singlescrollpatterncombinedb
	call bigscrollerwait
	ld a,(waitinterrupted)
	or a
	jr nz,scrollbigtext9
	; here switch the foregorund chars with the actual scrollletters first
	ld hl,scrollbigtext5cont
	push hl
	ld hl,(bigscrolswitchfgpnt)
	jp (hl)
scrollbigtext5cont:
	call scrollnametabletovram
	call execroutine	; perform all extra routine
	; here switch the foregorund chars with the actual scrollletters
	ld hl,scrollbigtext7cont
	push hl
	ld hl,(bigscrolswitchfgpnt)
	jp (hl)
scrollbigtext7cont:

	pop bc
	djnz scrollbigtext75

	ld hl,(SX)
	inc hl
	ld (SX),hl
	pop bc
	dec b
	jp nz,scrollbigtext6

	ld a,(waitinterrupted)
	or a
	jp z,scrollbigtext5

scrollbigtext8:
	xor a
	ld (waitinterrupted),a
	call bigscrollerwait
	ld a,(waitinterrupted)
	or a
	jr nz,scrollbigtext8
	ret

scrollbigtext9:  pop bc
	pop bc
	jr scrollbigtext8

	;}}}

preparescrollpatterncombinedb:	; register the double chars in scrollpatternendbuf 
		;and set up the 16 bytes needed in singlescrollpatterncombinedb
	; {{{
	ld hl,(scrollbufpnt)
	ld bc,(scrollbuflength)
	add hl,bc
	dec hl
	push hl
	pop iy
	ld hl,scrollpatternendbuf
	ld b,7	; should this be 8 for now the lowest line is empty...
preparescrollpatterncombinedb2:
	push bc
	push hl
	call addtoscrollpatterncombinedb
	ld a,(scrollpage)
	add a,192
	or c
	ld (iy+0),a
	;ld bc,(scrollbuflength)
	ld bc,32 ; since we will work in nametable aline is 32 bytes always!
	add iy,bc
	pop hl
	pop bc
	inc hl
	inc hl
	djnz preparescrollpatterncombinedb2
	; now copy the charpatterns
	ld ix,scrollpatterncombinedb
preparescrollpatterncombinedb3:
	ld a,(ix+0)
	cp 255
	ret z
	ld h,0
	ld l,a
	add hl,hl
	add hl,hl
	add hl,hl
	ld de,scrollpatternsorig
	add hl,de
	push ix
	pop de
	inc de
	inc de
	inc de
	inc de
	ldi
	inc de
	ldi
	inc de
	ldi
	inc de
	ldi
	inc de
	ldi
	inc de
	ldi
	inc de
	ldi
	inc de
	ldi

	ld a,(ix+1)
	ld h,0
	ld l,a
	add hl,hl
	add hl,hl
	add hl,hl
	ld de,scrollpatternsorig
	add hl,de
	push ix
	pop de
	inc de
	inc de
	inc de
	inc de
	inc de
	ldi
	inc de
	ldi
	inc de
	ldi
	inc de
	ldi
	inc de
	ldi
	inc de
	ldi
	inc de
	ldi
	inc de
	ldi

	ld de,20
	add ix,de

	jp preparescrollpatterncombinedb3


	; }}}

bigscrollerwait:
	; {{{
	ei
	nop
	nop
	halt
	; do not stop scrolling in intro !!!
	ld a,(intromenuselect)
	inc a
	ret nz
	; back to our regular program
	call getjoystick
	and #30
	xor #30
	ld e,a
	ld a,(waitinterrupted)
	or e
	ld (waitinterrupted),a
	ret
	; }}}

scrollnametabletovram:
	; {{{
	ld b,7
	ld hl,(scrollbufpnt)
	ld de,0x1800-nametabel
	add hl,de
	ex de,hl
	ld hl,(scrollbufpnt)
scrollnametabletovram2:
	push bc
	push hl
	push de
	ld bc,(scrollbuflength)
	call LDIRVM
	ld bc,32
	pop hl
	add hl,bc
	ex de,hl
	pop hl
	add hl,bc
	pop bc
	djnz scrollnametabletovram2
	ret
	; }}}

singlescrollpatterncombinedb:
	; {{{
	ld a,(scrollpage)
	xor 64
	ld (scrollpage),a
	; now make the patterns
	ld de,tmpcharscrollpattern
	ld hl,scrollpatterncombinedb
singlescrollpatterncombinedb2:
	ld a,(hl)
	cp 255
	jr z,singlescrollpatterncombinedb4
	inc hl
	inc hl
	inc hl
	inc hl
	ld b,8
eeee
singlescrollpatterncombinedb3:
	ld c,(hl)
	inc hl
	rl (hl)
	rl c
	rl (hl)
	rl c
	dec hl
	ld (hl),c
	ld a,c
	ld (de),a
	inc de
	inc hl
	inc hl
	djnz singlescrollpatterncombinedb3
	jp singlescrollpatterncombinedb2
	; no more patterns to alter
singlescrollpatterncombinedb4:
	ld hl,singlescrollpatterncombinedb5
	push hl
	ld hl,(bigscrolchr2vrampnt)
	jp (hl)
singlescrollpatterncombinedb5:
	; now update the char in the nametabel
	ld b,32*7
	;ld hl,nametabel+6*32
	ld hl,(scrollbufpnt)
	ld a,(scrollpage)
	ld e,a
	ld d,128+63
singlescrollpatterncombinedb6:
	ld a,(hl)
	cp 128
	jr c,singlescrollpatterncombinedb8
	ld a,d
	and (hl)
	or e
	ld (hl),a
singlescrollpatterncombinedb8:
	inc hl
	djnz singlescrollpatterncombinedb6
	ret
	; }}}

bigscrolchr2vram2tabels:
	; now write to vram pattern tables
	ld a,(scrollpage)
	add a,128+2 ; skip empty and full aka 0 and 1
	ld h,0
	ld l,a
	add hl,hl
	add hl,hl
	add hl,hl
	ld de,256*8
	add hl,de
	ex de,hl
	push de
	ld hl,tmpcharscrollpattern
	ld bc,62*8
	call LDIRVM
	ld de,256*8
	pop hl
	add hl,de
	ex de,hl
	ld hl,tmpcharscrollpattern
	ld bc,62*8
	call LDIRVM
	ret

bigscrolchr2vram3tabels:
	; now write to vram pattern tables
	ld a,(scrollpage)
	add a,128+2 ; skip empty and full aka 0 and 1
	ld h,0
	ld l,a
	add hl,hl
	add hl,hl
	add hl,hl
	ex de,hl
	push de
	ld hl,tmpcharscrollpattern
	ld bc,62*8
	call LDIRVM
	ld de,256*8
	pop hl
	add hl,de
	ex de,hl
	push de
	ld hl,tmpcharscrollpattern
	ld bc,62*8
	call LDIRVM
	ld de,256*8
	pop hl
	add hl,de
	ex de,hl
	ld hl,tmpcharscrollpattern
	ld bc,62*8
	call LDIRVM
	ret

addtoscrollpatterncombinedb:
	;{{{
	;combo 0,0 and 1,1 will not be stored but simply return resp 0 and 1
	ld c,(hl)
	inc hl
	ld b,(hl)
	dec hl
	ld a,b
	or c
	ret z
	ld a,1
	cp b
	jr nz,addtoscrollpatterncombinedb1
	cp c
	ret z

addtoscrollpatterncombinedb1:
	ld ix,scrollpatterncombinedb
	ld c,2
addtoscrollpatterncombinedb2:
	ld a,(ix+0)
	cp 255
	jp z,realaddtoscrollpatterncombinedb
	cp (hl)
	jr nz,addtoscrollpatterncombinedb5
	inc hl
	ld a,(ix+1)
	cp (hl)
	jr z,addtoscrollpatterncombinedb6
	dec hl
addtoscrollpatterncombinedb5:
	ld de,20
	add ix,de
	inc c
	ld a,63 ; now debug code to see if we need to much of these overflow charcombinations
	cp c
	jp nc,addtoscrollpatterncombinedb2
	di
	halt

addtoscrollpatterncombinedb6:
	; found te exisiting combination, c is the character to use
	ld a,(ix+2)
	ld l,a
	ld a,(ix+3)
	ld h,a
	inc hl
	ld a,h
	ld (ix+3),a
	ld a,l
	ld (ix+2),a
	ld a,c
	ret

realaddtoscrollpatterncombinedb:
	; add a new exisiting combination, c is the character to use
	ld a,(hl)
	ld (ix+0),a
	inc hl
	ld a,(hl)
	ld (ix+1),a
	xor a
	ld (ix+3),a
	inc a
	ld (ix+2),a
	ld a,255	; set new endmarker
	ld (ix+20),a
	ld a,c
	ret

	;}}}

scrollunregistercombinerchar:
	; {{{
	ld a,(de)
	cp 128 ; stll not one of the combinerchars so simply ignore
	ret c
	and 63
	sub 2
	ret c ; not for full empty or filled blocks, they are special :-)
	; now times x20
	add a,a ; 2
	ld l,a
	ld h,0
	add hl,hl ; 4
	ld e,l
	ld d,h
	add hl,hl ; 8
	add hl,hl ; 16
	add hl,de ; 20
	ld de,scrollpatterncombinedb+2
	add hl,de
	ld e,(hl)
	inc hl
	ld d,(hl)
	dec de
	ld (hl),d
	dec hl
	ld (hl),e
	ret
	;}}}

cleanupscrollpatterncombinedb:
	; {{{
	ld bc,20
	ld ix,scrollpatterncombinedb
	ld iy,2 ; counter voor welke char is removed from nametable
cleanupscrollpatterncombinedb1:
	ld a,(ix+0)
	inc a
	ret z ; end marker 255 read so stop

	ld a,(ix+2)
	or (ix+3)
	jr z,cleanupscrollpatterncombinedb3
	add ix,bc
	inc iy
	jr cleanupscrollpatterncombinedb1

cleanupscrollpatterncombinedb3:
	push bc
	push ix
	push ix
	pop hl
	add hl,bc
	ex de,hl
	ld hl,scrollpatternendbuf; =scrollpatterncombinedb+20*32
	or a
	sbc hl,de
	ld c,l
	ld b,h
	pop hl
	ex de,hl
	ldir
	;now char is removed so adapt nametabel and decrease every char >= iy counter
	push iy
	pop de
	ld hl,(scrollbufpnt)
	ld bc,32*7
cleanupscrollpatterncombinedb4:
	ld a,(hl)
	cp 128
	jr c,cleanupscrollpatterncombinedb5
	and 63
	cp e
	jr c,cleanupscrollpatterncombinedb5
	dec (hl) ; (hl) >= e so decrease number
cleanupscrollpatterncombinedb5:
	inc hl
	dec bc
	ld a,b
	or c
	jr nz,cleanupscrollpatterncombinedb4

	pop bc
	jr cleanupscrollpatterncombinedb1
	; }}}

chartobig:
	; in hl points to char {{{
	push hl
	; clear 10x10 workspace (needed for 8x8 char and 1 bit border on all sides
	ld hl,workspace
	ld de,workspace+1
	ld bc,100
	xor a
	ld (hl),a
	ldir

	ld hl,workspace+8+1
	pop de
	ld bc,#08ff
chartobig2:
	push bc
	ld a,(de)
	inc de
	ld b,8
chartobig4:	add a,a
	jr nc,chartobig6
	ld (hl),c
chartobig6:	inc hl
	djnz chartobig4
	inc hl
	inc hl
	pop bc
	djnz chartobig2

	; now copy this 10x10 to workspace+100 but width the correct chars 224-255...
	ld ix,workspace+1+8
	ld hl,workspace+100
	ld b,8
chartobig8:
	push bc
	ld b,8
chartobig10:
	ld de,0
	; the lower bits of e will have the following meaning
	; SelfFilled,Right,Left,Down,Up ; 1 means filled
	ld a,(ix+0)
	add a,a
	rl e
	ld a,(ix+1)
	add a,a
	rl e
	ld a,(ix-1)
	add a,a
	rl e
	ld a,(ix+10)
	add a,a
	rl e
	ld a,(ix-10)
	add a,a
	rl e
	inc ix
	; now convert code in e to corresponding char
	push bc
	ex de,hl
	ld bc,(bigchartosimpelcnvpnt)
	add hl,bc
	;ld a,224
	;add a,(hl)
	ld a,(hl)
	ex de,hl
	pop bc
	ld (hl),a
	inc hl
	djnz chartobig10
	inc ix
	inc ix
	pop bc
	djnz chartobig8
	ret ;}}}

bigchartosimpelconvert:
	; 0 is empty, 1 is completely full
	db  0, 0, 0, 0
	db  0, 2, 3, 4
	db  0, 5, 6, 7
	db  0, 8, 9,10
	db 11,12,13, 1
	db 14,15,16, 1
	db 17,18,19, 1
	db  1, 1, 1, 1

createbigcharset0:
	ld b,8
createbigcharset1:
	ld a,(de)
	or (ix+0)
	ld (hl),a
	inc ix
	inc hl
	inc de
	djnz createbigcharset1
	ret

createbigcharset:
	; this charset goes from 128 up to 192 {{{
	; %11100000 to %11111111

	; clean workspace for 32 chars
	xor a
	ld hl,workspace
	ld de,workspace+1
	ld (hl),a
	ld bc,32*8-1
	ldir
	; set char 1 to full filled
	dec a
	ld hl,workspace+8
	ld de,workspace+9
	ld (hl),a
	ld bc,7
	ldir

	; create char topleft,bottomleft
	ld de,workspace+8*2
	ld hl,(bigscroltopleftpnt)
	ld bc,16
	ldir

	; mix topleft and bottomleft
	ld ix,workspace+8*2
	ld de,workspace+8*3
	ld hl,workspace+8*4
	call createbigcharset0

	; create char topright,bottomright
	ld de,16
	ld hl,(bigscroltopleftpnt)
	add hl,de
	ld de,workspace+8*5
	ld bc,16
	ldir

	; mix topright and bottomright
	ld ix,workspace+8*5
	ld de,workspace+8*6
	ld hl,workspace+8*7
	call createbigcharset0

	; mix all-left and all-right
	ld ix,workspace+8*4
	ld de,workspace+8*7
	ld hl,workspace+8*10
	call createbigcharset0

	; mix topleft and top right
	ld ix,(bigscroltopleftpnt)
	ld de,bigchartopright
	ld hl,workspace+8*8
	call createbigcharset0

	; mix bottomleft and bottom right
	ld ix,bigcharbottomleft
	ld de,bigcharbottomright
	ld hl,workspace+8*9
	call createbigcharset0


	; now for the upper 9 chars
	ld b,9
	ld hl,workspace+8*10
	ld de,workspace+8*11
createbigcharset2:
	push bc
	ld b,8
createbigcharset3:
	ld a,255
	xor (hl)
	ld (de),a
	inc hl
	inc de
	djnz createbigcharset3
	ld bc,-16
	add hl,bc
	pop bc
	djnz createbigcharset2

	; store the patterns just created
	;actually we only need to store the empty and full char patterns, and all the color tables for all chars
	ld hl,workspace
	ld de,scrollpatternsorig
	ld bc,8*32
	ldir
	; now to vram
	ld hl,workspace
	ld de,128*8
	ld bc,32*8
	call LDIRVM	; copy patern table
	ld hl,workspace
	ld de,192*8
	ld bc,32*8
	call LDIRVM	; copy patern table

	ld hl,workspace
	ld de,128*8+256*8
	ld bc,32*8
	call LDIRVM	; copy patern table
	ld hl,workspace
	ld de,192*8+256*8
	ld bc,32*8
	call LDIRVM	; copy patern table

	ld hl,workspace
	ld de,128*8+512*8
	ld bc,32*8
	call LDIRVM	; copy patern table
	ld hl,workspace
	ld de,192*8+512*8
	ld bc,32*8
	call LDIRVM	; copy patern table
	;now colors
	ld de,workspace+1
	ld hl,workspace
	ld bc,64*8
	ld a,#12
	ld (hl),a
	ldir

	ld hl,workspace
	ld de,128*8+0x2000
	ld bc,64*8
	call LDIRVM	; copy color table
	ld hl,workspace
	ld de,192*8+0x2000
	ld bc,64*8
	call LDIRVM	; copy color table
	ld hl,workspace
	ld de,128*8+256*8+0x2000
	ld bc,64*8
	call LDIRVM	; copy color table
	ld hl,workspace
	ld de,192*8+256*8+0x2000
	ld bc,64*8
	call LDIRVM	; copy color table
	ld hl,workspace
	ld de,128*8+512*8+0x2000
	ld bc,64*8
	call LDIRVM	; copy color table
	ld hl,workspace
	ld de,192*8+512*8+0x2000
	ld bc,64*8
	call LDIRVM	; copy color table
	ret	; }}}


bigchartopleft: ; {{{
	db %11110000
	db %11000000
	db %10000000
	db %10000000
	db %00000000
	db %00000000
	db %00000000
	db %00000000
	;}}}
bigcharbottomleft: ; {{{
	db %00000000
	db %00000000
	db %00000000
	db %00000000
	db %10000000
	db %10000000
	db %11000000
	db %11110000
	;}}}
bigchartopright: ; {{{
	db %00001111
	db %00000011
	db %00000001
	db %00000001
	db %00000000
	db %00000000
	db %00000000
	db %00000000
	;}}}
bigcharbottomright: ; {{{
	db %00000000
	db %00000000
	db %00000000
	db %00000000
	db %00000001
	db %00000001
	db %00000011
	db %00001111
	;}}}


bigchartopleft2: ; {{{
	db %11100000
	db %11000000
	db %10000000
	db %00000000
	db %00000000
	db %00000000
	db %00000000
	db %00000000
	;}}}
bigcharbottomleft2: ; {{{
	db %00000000
	db %00000000
	db %00000000
	db %00000000
	db %00000000
	db %10000000
	db %11000000
	db %11100000
	;}}}
bigchartopright2: ; {{{
	db %00000111
	db %00000011
	db %00000001
	db %00000000
	db %00000000
	db %00000000
	db %00000000
	db %00000000
	;}}}
bigcharbottomright2: ; {{{
	db %00000000
	db %00000000
	db %00000000
	db %00000000
	db %00000000
	db %00000001
	db %00000011
	db %00000111
	;}}}
;Pattern generator table
bigscrolchars:
	; 0-9,A-Z char definitions {{{
	db %11111000   ; 0100  - 20
	db %10001000   ; 0101  - 20
	db %10011000   ; 0102  - 20
	db %10111000   ; 0103  - 20
	db %11101000   ; 0104  - 20
	db %10001000   ; 0105  - 20
	db %11111000   ; 0106  - 20
	db %00000000   ; 0107  - 20
	db %01000000   ; 0108  - 21
	db %11000000   ; 0109  - 21
	db %01000000   ; 010a  - 21
	db %01000000   ; 010b  - 21
	db %01000000   ; 010c  - 21
	db %01000000   ; 010d  - 21
	db %11100000   ; 010e  - 21
	db %00000000   ; 010f  - 21
	db %11110000   ; 0110  - 22
	db %10011000   ; 0111  - 22
	db %00011000   ; 0112  - 22
	db %00110000   ; 0113  - 22
	db %01100000   ; 0114  - 22
	db %11000000   ; 0115  - 22
	db %11111000   ; 0116  - 22
	db %00000000   ; 0117  - 22
	db %01111000   ; 0118  - 23
	db %01001000   ; 0119  - 23
	db %00001000   ; 011a  - 23
	db %01111000   ; 011b  - 23
	db %00001000   ; 011c  - 23
	db %10001000   ; 011d  - 23
	db %11111000   ; 011e  - 23
	db %00000000   ; 011f  - 23
	db %00110000   ; 0120  - 24
	db %01110000   ; 0121  - 24
	db %11010000   ; 0122  - 24
	db %10010000   ; 0123  - 24
	db %11111000   ; 0124  - 24
	db %00010000   ; 0125  - 24
	db %00010000   ; 0126  - 24
	db %00000000   ; 0127  - 24
	db %11111000   ; 0128  - 25
	db %10000000   ; 0129  - 25
	db %11110000   ; 012a  - 25
	db %00011000   ; 012b  - 25
	db %00001000   ; 012c  - 25
	db %00011000   ; 012d  - 25
	db %11110000   ; 012e  - 25
	db %00000000   ; 012f  - 25
	db %01110000   ; 0130  - 26
	db %11000000   ; 0131  - 26
	db %10000000   ; 0132  - 26
	db %11110000   ; 0133  - 26
	db %10010000   ; 0134  - 26
	db %10010000   ; 0135  - 26
	db %11110000   ; 0136  - 26
	db %00000000   ; 0137  - 26
	db %11111000   ; 0138  - 27
	db %10001000   ; 0139  - 27
	db %00011000   ; 013a  - 27
	db %00110000   ; 013b  - 27
	db %00100000   ; 013c  - 27
	db %00100000   ; 013d  - 27
	db %00100000   ; 013e  - 27
	db %00000000   ; 013f  - 27
	db %01110000   ; 0140  - 28
	db %01010000   ; 0141  - 28
	db %01010000   ; 0142  - 28
	db %11111000   ; 0143  - 28
	db %10001000   ; 0144  - 28
	db %10001000   ; 0145  - 28
	db %11111000   ; 0146  - 28
	db %00000000   ; 0147  - 28
	db %11110000   ; 0148  - 29
	db %10010000   ; 0149  - 29
	db %10010000   ; 014a  - 29
	db %11110000   ; 014b  - 29
	db %00010000   ; 014c  - 29
	db %00110000   ; 014d  - 29
	db %11100000   ; 014e  - 29
	db %00000000   ; 014f  - 29
	db %01110000   ; 0000  - 00
	db %11011000   ; 0001  - 00
	db %10001000   ; 0002  - 00
	db %10001000   ; 0003  - 00
	db %11111000   ; 0004  - 00
	db %10001000   ; 0005  - 00
	db %10001000   ; 0006  - 00
	db %00000000   ; 0007  - 00
	db %11110000   ; 0008  - 01
	db %10011000   ; 0009  - 01
	db %10011000   ; 000a  - 01
	db %11110000   ; 000b  - 01
	db %10011000   ; 000c  - 01
	db %10011000   ; 000d  - 01
	db %11110000   ; 000e  - 01
	db %00000000   ; 000f  - 01
	db %11110000   ; 0010  - 02
	db %10010000   ; 0011  - 02
	db %10000000   ; 0012  - 02
	db %10000000   ; 0013  - 02
	db %10000000   ; 0014  - 02
	db %10010000   ; 0015  - 02
	db %11110000   ; 0016  - 02
	db %00000000   ; 0017  - 02
	db %11110000   ; 0018  - 03
	db %01011000   ; 0019  - 03
	db %01001000   ; 001a  - 03
	db %01001000   ; 001b  - 03
	db %01001000   ; 001c  - 03
	db %01011000   ; 001d  - 03
	db %11110000   ; 001e  - 03
	db %00000000   ; 001f  - 03
	db %11110000   ; 0020  - 04
	db %10000000   ; 0021  - 04
	db %10000000   ; 0022  - 04
	db %11110000   ; 0023  - 04
	db %10000000   ; 0024  - 04
	db %10000000   ; 0025  - 04
	db %11110000   ; 0026  - 04
	db %00000000   ; 0027  - 04
	db %11110000   ; 0028  - 05
	db %10000000   ; 0029  - 05
	db %10000000   ; 002a  - 05
	db %11110000   ; 002b  - 05
	db %10000000   ; 002c  - 05
	db %10000000   ; 002d  - 05
	db %10000000   ; 002e  - 05
	db %00000000   ; 002f  - 05
	db %11111000   ; 0030  - 06
	db %10001000   ; 0031  - 06
	db %10000000   ; 0032  - 06
	db %10111000   ; 0033  - 06
	db %10001000   ; 0034  - 06
	db %10001000   ; 0035  - 06
	db %11111000   ; 0036  - 06
	db %00000000   ; 0037  - 06
	db %10001000   ; 0038  - 07
	db %10001000   ; 0039  - 07
	db %10001000   ; 003a  - 07
	db %11111000   ; 003b  - 07
	db %10001000   ; 003c  - 07
	db %10001000   ; 003d  - 07
	db %10001000   ; 003e  - 07
	db %00000000   ; 003f  - 07
	db %10000000   ; 0040  - 08; db %01110000   ; 0040  - 08
	db %10000000   ; 0041  - 08
	db %10000000   ; 0042  - 08
	db %10000000   ; 0043  - 08
	db %10000000   ; 0044  - 08
	db %10000000   ; 0045  - 08
	db %10000000   ; 0046  - 08; db %01110000   ; 0046  - 08
	db %00000000   ; 0047  - 08
	db %00111000   ; 0048  - 09
	db %00010000   ; 0049  - 09
	db %00010000   ; 004a  - 09
	db %00010000   ; 004b  - 09
	db %10010000   ; 004c  - 09
	db %10010000   ; 004d  - 09
	db %11110000   ; 004e  - 09
	db %00000000   ; 004f  - 09
	db %10001100   ; 0050  - 0a
	db %10011000   ; 0051  - 0a
	db %10110000   ; 0052  - 0a
	db %11100000   ; 0053  - 0a
	db %10110000   ; 0054  - 0a
	db %10011000   ; 0055  - 0a
	db %10001100   ; 0056  - 0a
	db %00000000   ; 0057  - 0a
	db %10000000   ; 0058  - 0b
	db %10000000   ; 0059  - 0b
	db %10000000   ; 005a  - 0b
	db %10000000   ; 005b  - 0b
	db %10000000   ; 005c  - 0b
	db %10000000   ; 005d  - 0b
	db %11110000   ; 005e  - 0b
	db %00000000   ; 005f  - 0b
	db %10001000   ; 0060  - 0c
	db %11111000   ; 0061  - 0c
	db %10101000   ; 0062  - 0c
	db %10101000   ; 0063  - 0c
	db %10001000   ; 0064  - 0c
	db %10001000   ; 0065  - 0c
	db %10001000   ; 0066  - 0c
	db %00000000   ; 0067  - 0c
	db %10001000   ; 0068  - 0d
	db %11001000   ; 0069  - 0d
	db %11101000   ; 006a  - 0d
	db %10111000   ; 006b  - 0d
	db %10011000   ; 006c  - 0d
	db %10001000   ; 006d  - 0d
	db %10001000   ; 006e  - 0d
	db %00000000   ; 006f  - 0d
	db %11110000   ; 0070  - 0e
	db %10010000   ; 0071  - 0e
	db %10010000   ; 0072  - 0e
	db %10010000   ; 0073  - 0e
	db %10010000   ; 0074  - 0e
	db %10010000   ; 0075  - 0e
	db %11110000   ; 0076  - 0e
	db %00000000   ; 0077  - 0e
	db %11110000   ; 0078  - 0f
	db %10010000   ; 0079  - 0f
	db %10010000   ; 007a  - 0f
	db %11110000   ; 007b  - 0f
	db %10000000   ; 007c  - 0f
	db %10000000   ; 007d  - 0f
	db %10000000   ; 007e  - 0f
	db %00000000   ; 007f  - 0f
	db %11111000   ; 0080  - 10
	db %10001000   ; 0081  - 10
	db %10001000   ; 0082  - 10
	db %10001000   ; 0083  - 10
	db %10111000   ; 0084  - 10
	db %10011100   ; 0085  - 10
	db %11110100   ; 0086  - 10
	db %00000000   ; 0087  - 10
	db %11111000   ; 0088  - 11
	db %10001000   ; 0089  - 11
	db %10001000   ; 008a  - 11
	db %11111000   ; 008b  - 11
	db %10110000   ; 008c  - 11
	db %10011000   ; 008d  - 11
	db %10001000   ; 008e  - 11
	db %00000000   ; 008f  - 11
	db %11111000   ; 0090  - 12
	db %10001000   ; 0091  - 12
	db %10000000   ; 0092  - 12
	db %11111000   ; 0093  - 12
	db %00001000   ; 0094  - 12
	db %10001000   ; 0095  - 12
	db %11111000   ; 0096  - 12
	db %00000000   ; 0097  - 12
	db %11111000   ; 0098  - 13
	db %00100000   ; 0099  - 13
	db %00100000   ; 009a  - 13
	db %00100000   ; 009b  - 13
	db %00100000   ; 009c  - 13
	db %00100000   ; 009d  - 13
	db %00100000   ; 009e  - 13
	db %00000000   ; 009f  - 13
	db %10010000   ; 00a0  - 14
	db %10010000   ; 00a1  - 14
	db %10010000   ; 00a2  - 14
	db %10010000   ; 00a3  - 14
	db %10010000   ; 00a4  - 14
	db %10010000   ; 00a5  - 14
	db %11110000   ; 00a6  - 14
	db %00000000   ; 00a7  - 14
	db %10001000   ; 00a8  - 15
	db %10001000   ; 00a9  - 15
	db %10001000   ; 00aa  - 15
	db %11011000   ; 00ab  - 15
	db %01010000   ; 00ac  - 15
	db %01010000   ; 00ad  - 15
	db %01110000   ; 00ae  - 15
	db %00000000   ; 00af  - 15
	db %10001000   ; 00b0  - 16
	db %10001000   ; 00b1  - 16
	db %10001000   ; 00b2  - 16
	db %10101000   ; 00b3  - 16
	db %10101000   ; 00b4  - 16
	db %11111000   ; 00b5  - 16
	db %10001000   ; 00b6  - 16
	db %00000000   ; 00b7  - 16
	db %10001000   ; 00b8  - 17
	db %11011000   ; 00b9  - 17
	db %01010000   ; 00ba  - 17
	db %01110000   ; 00bb  - 17
	db %01010000   ; 00bc  - 17
	db %11011000   ; 00bd  - 17
	db %10001000   ; 00be  - 17
	db %00000000   ; 00bf  - 17
	db %10001000   ; 00c0  - 18
	db %10001000   ; 00c1  - 18
	db %10001000   ; 00c2  - 18
	db %11111000   ; 00c3  - 18
	db %00100000   ; 00c4  - 18
	db %00100000   ; 00c5  - 18
	db %00100000   ; 00c6  - 18
	db %00000000   ; 00c7  - 18
	db %11111100   ; 00c8  - 19
	db %00001100   ; 00c9  - 19
	db %00011000   ; 00ca  - 19
	db %00110000   ; 00cb  - 19
	db %01100000   ; 00cc  - 19
	db %11000000   ; 00cd  - 19
	db %11111100   ; 00ce  - 19
	db %00000000   ; 00cf  - 19
	db %00000000   ; space
	db %00000000   ; space
	db %00000000   ; space
	db %00000000   ; space
	db %00000000   ; space
	db %00000000   ; space
	db %00000000   ; space
	db %00000000   ; space
	; }}}
;	vim:foldmethod=marker:ft=z8a:ts=16
