; MSX Block Puzzle game, released as entry for the MSXDev'20
; Created by David Heremans, aka turbor on mrc
;
; read user input and determine how pieces need to move
;


move_item_by_user:
	; {{{
	ld a,(pieceoffset)
	or a
	jp z,move_item_by_userjoystick
	; otherwise do nothing until joystick has been centered again
	call getjoystick
	and 15
	cp 15
	ret nz
	;joystick has been centered
	ld hl,0
	ld (pieceoffset),hl
	ret
	; }}}


move_item_by_userjoystick:
;allow user input to move the piece around if shift is allowed {{{
	call getjoystick
	ld b,a
	ld a,(prevjoystick)
	ld c,a
	ld a,b
	ld (prevjoystick),a
	xor c
	and c
	bit 4,a
	jp z,move_item_by_userjoy2
	; fire 1 pressed so place the piece in the grid10x10
	ld a,1
ffffff
	ld (pieceplaceingrid),a
	ret
move_item_by_userjoy2:
	bit 5,a
	jp z,move_item_by_userjoy3
	; fire 2 pressed so swap to next available playablepiece
	ld a,1
	ld (pieceplacenextpiece),a
	ret
move_item_by_userjoy3:
	rrc a
	jr nc,movecursorbyuser1
	; move up
	call shiftupallowed
	ret nz
	call shiftup
	ld hl,32
	jp movecursorbyuser4

movecursorbyuser1:
	rrc a
	jr nc,movecursorbyuser2
	; move down
	call shiftdownallowed
	ret nz
	call shiftdown
	ld hl,-32
	jp movecursorbyuser4

movecursorbyuser2:
	rrc a
	jr nc,movecursorbyuser3
	; move left
	call shiftleftallowed
	ret nz
	call shiftleft
	ld hl,1
	jp movecursorbyuser4

movecursorbyuser3:
	rrc a
	;jr nc,movecursorbyuser5
	ret nc
	; move right
	call shiftrightallowed
	ret nz
	call shiftright
	ld hl,-1
movecursorbyuser4:
	ld (pieceoffset),hl
	jp startsfx1
	;ret

;movecursorbyuser5:
;	ret
	; }}}



; read the joysticks and transform the keyboard bits to joystick layout
;PSG I/O port A (r#14) ? read-only
;  Bit Description Comment 
;  0 Input joystick pin 1 (up)
;  1 Input joystick pin 2 (down)
;  2 Input joystick pin 3 (left)
;  3 Input joystick pin 4 (right)
;  4 Input joystick pin 6 (trigger A) 
;  5 Input joystick pin 7 (trigger B) 
;  6 Japanese keyboard layout bit (1=JIS, 0=ANSI) 
;  7 Cassette input signal
getjoystick
;{{{
	; jump to AI player if active
	ld a,(ai_active)
	or a
	jp nz,ai_player_joystick
;}}}
getrealjoystick
;{{{
	di
	in a,(#aa)
	and #f0
	or 8
	out (#aa),a
	nop
	in a,(#a9)
	ei
	ld e,a
	rra
	rra
	rra
	rra
	and 15
	ld c,a
	ld b,0
	ld hl,cursorjoystickmap
	add hl,bc
	ld a,(hl)
	; now read spacebar as trigger1
	ld d,a
	ld a,e
	and 1
	ld a,d
	jr nz,getjoystick1
	xor #10
getjoystick1:	; now read 'm' as trigger2
	ld d,a
	di
	in a,(#aa)
	and #f0
	or 4
	out (#aa),a
	nop
	in a,(#a9)
	ei
	and 4
	ld a,d
	ret nz
	xor #20
	ret
;}}}

cursorjoystickmap
	db #F0,#F4,#F1,#F5
	db #F2,#F6,#F3,#F7
	db #F8,#FC,#F9,#FD
	db #FA,#FE,#FB,#FF

;	vim:foldmethod=marker:ft=z8a:ts=16
