; MSX Block Puzzle game, released as entry for the MSXDev'20
; Created by David Heremans, aka turbor on mrc
;
; The main program
;
; In essence, show intro and start the game.
; The game will be played by a simple AI player as means of demonstration if you let the intro run its course
;


include "bios.asc"

WRVDP	MACRO	@WAARDE,@POORT
	; {{{
	LD	A,@WAARDE
	OUT	(#99),A
	LD	A,128+@POORT
	OUT	(#99),A
	ENDM
	; }}}

chkvdp2	macro
	; {{{
	LOCAL chkvdp2@sym
chkvdp2@sym
	in	a,(#99)
	rrca
	jp	c,chkvdp2@sym
	endm
	; }}}

DEBUG equ 0

;This code is used in conjunction with the openMSX debugdevice to help debug/time my code
debugdeviceascii macro @TEXTVAL
	; {{{
	if DEBUG
	LOCAL _debugdevicetmp
	LOCAL _debugdevicetmp2
	jr _debugdevicetmp2
_debugdevicetmp 
	db @TEXTVAL
_debugdevicetmp2
	ld a,0x58
	out (0x2e),a
	ld a,'-'
	out (0x2f),a
	ld a,0x63
	out (0x2e),a
	ld hl,_debugdevicetmp
	ld c,0x2f
	ld b,_debugdevicetmp2-_debugdevicetmp
	otir
	ld a,0x03
	out (0x2e),a
	ld a,'-'
	out (0x2f),a
	endif
	endm
	; }}}

START	EQU	#4000

BUFROWS	EQU 8
BUFCOLS EQU 8

; created by pasmo  and the --bin switch, the org command should be the first one seen by pasmo
	org	START
	db 'AB' ; expansion ROM header
	DW initcode ; start of the init code, 0 if no initcode
	DW 0 ; pointer to CALL statement handler, 0 if no such handler
	DW 0 ; pointer to expansion device handler, 0 if no such handler
	DW 0 ; pointer to the start of a tokenized basicprogram, 0 if no basicprogram
	DW 0,0,0 ; room reserved for future extensions
initcode:
	; set page 1 & 2 to the same slot... Code from the wiki of ww.msx.org
	; https://www.msx.org/wiki/Develop_a_program_in_cartridge_ROM#Typical_examples_to_make_a_32kB_ROM

	; Typical routine to select the ROM on page 8000h-BFFFh from page 4000h-7BFFFh
	call	RSLREG
	rrca
	rrca
	and	3	;Keep bits corresponding to the page 8000h-BFFFh
	ld	c,a
	ld	b,0
	ld	hl,EXPTBL
	add	hl,bc
	ld	a,(hl)
	and	80h
	or	c
	ld	c,a
	inc	hl
	inc	hl
	inc	hl
	inc	hl
	ld	a,(hl)
	and	0Ch
	or	c
	ld	h,080h
	call	ENASLT		; Select the ROM on page 8000h-BFFFh

initgame:
	call init
	ld a,4 ; normal difficulty
	ld (introdifficultselected),a
	call setrandomdistribution
	ld hl,H.TIMI
	ld de,oldhook
	ld bc,5
	ldir
	di
	ld a,#C3
	ld (H.TIMI),a
	ld hl,musicplayer
	ld (H.TIMI+1),hl
	call stopmusic
	ei
startintroscreen:
	call clearspriteatrtabel
	call spriteinit
	call initintronametable
	call ENASCR	; enable screen
	ld hl,(musicpointer_A)
	ld a,h
	or l
	ld hl,(musicpointer_B)
	or h
	or l
	ld hl,(musicpointer_C)
	or h
	or l
	call z,startmusic
	xor a
	ld (waitinterrupted),a
	call introhandcodeinit
	call startbirdanimation
	xor a	; set slow bigscroller
	ld (scrolltextspeed),a
	ld hl,introscroltext
	call scrollbigtext
	ld de,introhandcode
	call delroutine
	call stopbirdanimation
;startintroscreen1:
;	call bigscrollerwait
;	jr z,startintroscreen1

	; we set nametables and sprites here so that we can correct them in joystickspriteinit if needed
	call initgamenametable
	xor a
	ld (ai_active),a
	; if timeout scroller then we go start the AI player
	ld a,(intromenuselect)
	inc a
	jr z,startintroscreen2
ggggg
	ld a,AI_SLOWDOWNINI
	ld (ai_slowdown),a
	ld a,255
	ld (ai_prevjoy),a
	inc a
	ld (ai_state),a
	inc a
	ld (ai_active),a
	call joystickspriteinit
startintroscreen2:
	ld a,(debugmode) ; if debug enabled we will allow manual text sprite display
	or a
	jr z,startgame
	ld de,debugsprites
	call addroutine
startgame: 
	ld a,255	; make sure that the bigscroller is interruptable in game over
	ld (intromenuselect),a
	xor a
	ld (forcefixednextpiece),a
	call setrandomdistribution  ; clear the pieces distribution to erase all makeharder call effects
	call initscore
	call showscore
	call initplayfield
	call gridbitmap_to_grid10x10
	call selectnewplayablepieces
	call playablepieces_to_nametabel
	; shortcut since last elements is now already in mask
	ld a,2
	ld (pieceplayednowselected),a
	ld a,(pieceplayable3)
	ld (pieceplayednow),a
	call select_next_piece ; when we start the first piece is selected

	ld a,(ai_active)
	or a
	call z,stopmusic
	xor a
	ld (gameover),a
	call check_possible_gameover ; debug field might be to crowded...

maincount:
	call item_place_color
	call move_item_by_user
	ld a,(pieceplaceingrid)
	or a
	jr z,maincount3
	call drop_piece_in_grid
	jr z,maincount3 ; didn't drop anything
	xor a
	ld (pieceplaceingrid),a
	call check_new_pieces_needed ; Z if new items
	call check_possible_gameover ; new or old items game over possible...
maincount3:
	ld a,(pieceplacenextpiece)
	or a
	call nz,select_next_piece
	ei
	halt
	call grid10x10_to_nametabel		; draw grid
	call item_to_nametabel		; draw item over grid
	call execroutine	; perform all extra routine before writting to vram the gridnametable, this allows extra animation in these routines to be displayed on top of the playingfield!
	call gridnametabel_to_vram
	call grid10x10_do_animation
	;no 10x10 disapear animation anymore and still no new itemselected...
	; auto select next piece
	ld a,(grid10x10_do_animation_inprogress)
	or a
	jr nz,maincount4
	ld a,(emptyitemmask)
	or a
	call z,select_next_piece
maincount4:
	halt
	call increasedisplayscore
	ld a,(gameover)
	or a
	jp z,maincount
	; but first end the animation even if gameover
	ld a,(grid10x10_do_animation_inprogress)
	or a
	jp nz,maincount
	;show gameover if not ai_player
	ld a,(ai_active)
	or a
	jr z,maincount5
	ld a,(ai_state)
	cp 254
	jp nz,maincount
	xor a
	ld (ai_active),a
	jp startintroscreen
maincount5:
	call showgameover
	ld a,(waitinterrupted)
	or a
	jp z,startintroscreen
	jp startgame

init:
	; first clear all variables to zero
	;especially needed for the routeinstack!!
	ld de,#c001
	ld hl,#c000
	xor a
	ld (hl),a
	ld bc,endvarspace-#c000
	ldir
	; make sure the the old keys are 'not pushed'
	dec a
	ld de,oldnewkey+1
	ld hl,oldnewkey
	ld bc,10
	ld (hl),a
	ldir

	ld a,2
	call CHGMOD	; screen 2
	xor a
	ld (CLIKSW),a	; disable keyboard click

	call DISSCR	; disable screen
	ld hl,vrampat1
	ld de,0
	ld bc,vrampat1end-vrampat1 ;256*8
	call LDIRVM	; copy patern table
	
commonchars equ 51
	ld hl,vrampat1
	ld de,256*8
	ld bc,commonchars*8
	call LDIRVM	; copy patern table
	ld hl,vrampat2
	ld de,256*8+commonchars*8
	ld bc,vrampat2end-vrampat2
	call LDIRVM	; copy patern table

	ld hl,vrampat1
	ld de,256*16
	ld bc,commonchars*8
	call LDIRVM	; copy patern table
	ld hl,vrampat3
	ld de,256*16+commonchars*8
	ld bc,vrampat3end-vrampat3
	call LDIRVM	; copy patern table

	ld hl,vramcol1
	ld de,0x2000
	ld bc,vramcol1end-vramcol1 ;256*8
	call LDIRVM	; copy color table

	ld hl,vramcol1
	ld de,0x2000+256*8
	ld bc,commonchars*8
	call LDIRVM	; copy color table
	ld hl,vramcol2
	ld de,0x2000+256*8+commonchars*8
	ld bc,vramcol2end-vramcol2 
	call LDIRVM	; copy color table

	ld hl,vramcol1
	ld de,0x2000+256*16
	ld bc,commonchars*8
	call LDIRVM	; copy color table
	ld hl,vramcol3
	ld de,0x2000+256*16+commonchars*8
	ld bc,vramcol3end-vramcol3 
	call LDIRVM	; copy color table

	ld hl,vramname1
	ld de,0x1800
	ld bc,vramname1end-vramname1
	call LDIRVM	; copy color table

	ret

initgamenametable:
	; now make the sprites zoomed for the letters
	ld a,(RG1SAV)
	or 3
	ld (RG1SAV),a
	ld b,a
	ld c,1
	call WRTVDP
	; and hide the sprites used during the intro
	ld hl,spriteatrtabel
	ld de,4
	ld b,31
	ld a,210
initgamenametable2:
	ld (hl),a
	add hl,de
	djnz initgamenametable2

	;copy nametabel to workarrea
	ld hl,vramname1
	ld de,nametabel
	ld bc,vramname1end-vramname1
	ldir

	; intro screen hiscore letters changed some chars so restore!
	ld hl,vrampat3
	ld de,256*16+commonchars*8
	ld bc,vrampat3end-vrampat3
	call LDIRVM	; copy patern table
	ld hl,vramcol3
	ld de,0x2000+256*16+commonchars*8
	ld bc,vramcol3end-vramcol3
	call LDIRVM	; copy color table

	ld hl,vramname1
	ld de,0x1800
	ld bc,vramname1end-vramname1
	call LDIRVM	; copy color table
	jp transferspriteatrtabel
	;ret

initscore:
	ld hl,0
	ld (pieceoffset),hl
	xor a
	ld (pieceplaceingrid),a
	ld (pieceplacenextpiece),a

	ld hl,itemmask
	ld de,itemmask+1
	xor a
	ld (hl),a
	ld bc,20
	ldir

	xor a
	ld hl,realscore
	ld (hl),a
	ld de,realscore+1
	ld bc,23
	ldir
	ld a,3
	ld (increasedisplayspeedcnt),a
	ld (increasedisplayspeed),a
	ld a,255
	ld (hiscore),a
	ld (realscore),a
	ld (blockscore),a
	ld (displayscore),a
	ld (hiscore+7),a
	ld (realscore+7),a
	ld (blockscore+7),a
	ld (displayscore+7),a
	ld hl,#0
	ld (realscore+1),hl
	ld (realscore+3),hl
	ld hl,#0000
	ld (realscore+5),hl
	ret

	INCLUDE "intro.asc"

increasedisplayscore:
	; not every interrupt we want to check this!
	ld a,(increasedisplayspeedcnt)
	dec a
	ld (increasedisplayspeedcnt),a
	ret nz
	ld a,(increasedisplayspeed)
	ld (increasedisplayspeedcnt),a

	; time to check!
	; are we displaying correct  score?
	ld hl,displayscore+1
	ld de,realscore+1
	call bcdcmpdehl
	ret z

	; increase displayed score by one
	ld hl,displayscore+5+1
	ld de,score0001+5+1
	call bcdadddehl
showscore:
	ld hl,displayscore+1
	ld de,#1800+32*21+14-6 ; vram destination
	ld ix,nametabel+32*21+14-6
	ld bc,#3433 ; offset for numbers in b, empty char in c
	call shownumbers

	ld hl,displayscore+1
	ld de,#1800+32*22+14-6 ; vram destination
	ld ix,nametabel+32*22+14-6
	ld bc,#3f3e ; offset for numbers in b, empty char in c
	call shownumbers
	ret

	
shownumbers:
	push ix
	push bc
	push hl
	ex de,hl
	call SETWRT
	pop hl
	pop bc
	pop de
	ld a,b
	push af
	ld b,5 ; max number of invisible prefixes
shownumber1:
	ld a,(hl)
	or a
	jp nz,shownumbers3
	ld a,c
	or a
	jr z,shownumbers2
	out (#98),a
	ld (de),a
	inc de
shownumbers2:
	inc hl
	djnz shownumber1
shownumbers3:	
	inc b
	pop af
	ld c,a
shownumbers4:	
	ld a,(hl)
	add a,c
	out (#98),a
	inc hl
	ld (de),a
	inc de
	djnz shownumbers4
	ret

savefgblocks:	
	; Store the blocks in the foreground in a buffer 
	; {{{
	ld de,fgblocksbuffer
	ld hl,(scrollbufpnt)
	ld b,2
	ld a,(initintronametabledb+15)
	ld c,a
	call savefgblocks0
	ld b,5
	ld a,(initintronametabledb+16)
	ld c,a

savefgblocks0:
	push bc
	ld b,30
savefgblocks1:
	ld a,(hl)
	cp 16
	jr c,savefgblocks3
	xor a
savefgblocks3:
	ld (de),a
	ld (hl),c
	inc hl
	inc de
	djnz savefgblocks1

	inc hl
	inc hl
	inc de
	inc de

	pop bc
	djnz savefgblocks0

	ret
	; }}}

switchfgblocks:
	; {{{
	ld hl,fgblocksbuffer
	ld de,(scrollbufpnt)
	ld bc,32*7
switchfgblocks1:
	ld a,(hl)
	or a
	jr z,switchfgblocks3
	ex af,af'
	ld a,(de)
	ld (hl),a
	ex af,af'
	ld (de),a
switchfgblocks3:
	inc hl
	inc de
	dec bc
	ld a,b
	or c
	jr nz,switchfgblocks1
	ret
	; }}}
DESTPAGE:	db 0

vrampat1:	
	INCLUDE "vram-pat1.txt"
vrampat1end:
vrampat2:	
	INCLUDE "vram-pat2.txt"
vrampat2end:
vrampat3:	
	INCLUDE "vram-pat3.txt"
vrampat3end:


vramcol1:
	INCLUDE "vram-col1.txt"
vramcol1end:
vramcol2:
	INCLUDE "vram-col2.txt"
vramcol2end:
vramcol3:
	INCLUDE "vram-col3.txt"
vramcol3end:

vramname1:
	INCLUDE "vram-name.txt"
vramname1end:

vrampatgameover:
	INCLUDE "vram-patgameover.txt"
vrampatgameoverend:
vramcolgameover:
	INCLUDE "vram-colgameover.txt"
vramcolgameoverend:
vramnamegameover:
	INCLUDE "vram-namegameover.txt"
vramnamegameoverend:
screen1chardb:
	INCLUDE "charscr1.asc"
screen1chardbend:
introscroltext:	db	"WELCOME     "
	db	"PLAYER            "
	db 0 ; debug shorten intro text
	db	"TO     BLOCK     PUZZLE                    "
	db	"PLAY     USING     THE     CURSORS     "
	db	"THE     SPACEBAR     AND     THE     M     KEY     "
	db	"                                             "
	db	0
	INCLUDE "pieces.asc"
	INCLUDE "piecelib.asc"
	INCLUDE "makeharder.asc"
	INCLUDE "joystick.asc"
	INCLUDE "gameover.asc"

score0001:	db 255,0,0,0,0,0,1,255

	INCLUDE "bcdlib.asc"
	INCLUDE "gridbitmapmanipulators.asc"
	INCLUDE "boxcopy.asc"
	INCLUDE "routines.asc"
	INCLUDE "charanimation.asc"
	INCLUDE "bigscroller.asc"
	INCLUDE "msxwletsprites.asc"
	INCLUDE "bird.asc"
	INCLUDE "ai-player.asc"
	INCLUDE "joysticksprites.asc"
	INCLUDE "musicplayer.asc"
	INCLUDE "musicpiece1.asc"
	INCLUDE "musicpiece2.asc"

voicespointer:
	DW voice0,voice1,voice2,voice3
	DW voice4,voice5,voice6,voice7
voice0:
	INCLUDE "nice3.wavfrm_msx.asm"
	dw 0xffff
voice1:
	INCLUDE "great3.wavfrm_msx.asm"
	dw 0xffff
voice2:
	INCLUDE "super1.wavfrm_msx.asm"
	dw 0xffff
voice3:
	INCLUDE "good2.wavfrm_msx.asm"
	dw 0xFFFF
voice4:
	INCLUDE "excellent1.wavfrm_msx.asm"
	dw 0xFFFF
voice5:
	INCLUDE "splendid1.wavfrm_msx.asm"
	dw 0xFFFF
voice6:
	INCLUDE "perfect1.wavfrm_msx.asm"
	dw 0xFFFF
voice7:
	INCLUDE "welcome1.wavfrm_msx.asm"
	dw 0xFFFF

einde	equ $
	ds #C000-einde

	INCLUDE "variablespace.asc"


;	vim:foldmethod=marker:ft=z8a:ts=16
