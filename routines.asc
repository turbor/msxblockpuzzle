; MSX Block Puzzle game, released as entry for the MSXDev'20
; Created by David Heremans, aka turbor on mrc
;
; a simple task scheduler in the game to allow all the animations etc 
; to work as if running in parallel
; you add the routines to be called on a custom stack and remove them when no longer needed
; calling the execroutine will then sequentially call al routines on the stack
;
addroutine:	; in DE routine address
	; each routine can be on stack only once!
	; {{{
	ld hl,routinestack-1
addroutine1:
	inc hl
	ld a,(hl)
	ld c,a
	inc hl
	ld b,(hl)
	ld a,e
	cp c
	jr nz,addroutine3
	ld a,d
	cp b
	ret z ; routine already in stack!
addroutine3:
	ld a,c
	or b
	jr nz,addroutine1

	ld (hl),d
	dec hl
	ld (hl),e
	ret ; assuming next two bytes are still zero!!
	; }}}

isonroutinestack:	; in DE routine addres
	; returns Z if on stack, NZ if not on stack
	; {{{
	ld hl,routinestack-1
isonroutinestack1:
	inc hl
	ld a,(hl)
	ld c,a
	inc hl
	ld b,(hl)
	or b
	jr z,isonroutinestack5 ; end of stack reached
	ld a,e
	cp c
	jr nz,isonroutinestack1
	ld a,d
	cp b
	ret z ; routine on stack!
	jr isonroutinestack1
isonroutinestack5:
	xor a
	inc a
	ret
	; }}}


delroutine:	; in DE routine to remove
	; {{{
	ld hl,routinestack
delroutine1:
	ld a,e
	cp (hl)
	jr nz,delroutine2
	inc hl
	ld a,d
	cp (hl)
	jr nz,delroutine3
	dec hl
	ld e,l
	ld d,h
	inc hl
	inc hl
delroutine4:
	ld bc,2
	ldir
	;if we did not just copy two zero then move again two bytes
	push de
	push hl

	dec de
	ld a,(de)
	ld l,a
	dec de
	ld a,(de)
	or l
	pop hl
	pop de
	jr nz,delroutine4
	ret

delroutine2:	inc hl
delroutine3:	inc hl
	jr delroutine1
	; }}}



execroutine:
	; {{{
	ld hl,routinestack
execroutine1:
	ld e,(hl)
	inc hl
	ld d,(hl)
	inc hl
	ld a,d
	or e
	ret z
	;else de is a routine to call
	push hl
	ld hl,execroutine3
	push hl
	ex de,hl
	jp (hl)
execroutine3:	pop hl
	jr execroutine1
	; }}}

;	vim:foldmethod=marker:ft=z8a:ts=16
